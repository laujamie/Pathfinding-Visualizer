{"version":3,"sources":["components/pathfinding-visualizer/node/node.js","components/pathfinding-visualizer/pathfinding.js","App.js","serviceWorker.js","index.js"],"names":["Node","props","x","y","isStart","isEnd","weight","isVisited","whatClass","Infinity","id","className","PathfindingVisualizer","useState","grid","setGrid","startY","startX","endY","endX","useEffect","res","i","temp","j","push","distance","Fragment","map","row","rowId","key","node","nodeId","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oTAmBeA,G,MAhBF,SAAAC,GAAU,IACbC,EAA4CD,EAA5CC,EAAGC,EAAyCF,EAAzCE,EAAGC,EAAsCH,EAAtCG,QAASC,EAA6BJ,EAA7BI,MAAOC,EAAsBL,EAAtBK,OAAQC,EAAcN,EAAdM,UAEhCC,EAAYJ,EACd,aACAC,EACA,WACAE,EACA,eACAD,IAAWG,IACX,OACA,GAEJ,OAAO,yBAAKC,GAAE,eAAUR,EAAV,YAAeC,GAAKQ,UAAS,eAAUH,OCwDxCI,G,MApEe,SAAAX,GAAU,IAAD,EACbY,mBAAS,IADI,mBAC9BC,EAD8B,KACxBC,EADwB,OAETF,mBAAS,IAFA,mBAE9BG,EAF8B,aAGTH,mBAAS,KAHA,mBAG9BI,EAH8B,aAIbJ,mBAAS,KAJI,mBAI9BK,EAJ8B,aAKbL,mBAAS,KALI,mBAK9BM,EAL8B,UA+BrC,OAZAC,qBAAU,WAER,IADA,IAbkBlB,EAAGC,EAajBkB,EAAM,GACDC,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAE3B,IADA,IAAIC,EAAO,GACFC,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAKE,KAhBF,CACLvB,EAFgBA,EAiBOoB,EAdvBnB,EAHmBA,EAiBOqB,EAb1BpB,QAASF,IAAMe,GAAUd,IAAMa,EAC/BX,MAAOH,IAAMiB,GAAQhB,IAAMe,EAC3BQ,SAAUjB,IACVF,WAAW,EACXD,OAAQ,IAWRe,EAAII,KAAKF,GAEXR,EAAQM,KACP,IAGD,kBAAC,IAAMM,SAAP,KACE,wDACA,yBAAKhB,UAAU,QACZG,EAAKc,KAAI,SAACC,EAAKC,GACd,OACE,yBAAKC,IAAKD,GACPD,EAAID,KAAI,SAACI,EAAMC,GAAY,IAExB/B,EAOE8B,EAPF9B,EACAC,EAME6B,EANF7B,EACAC,EAKE4B,EALF5B,QACAC,EAIE2B,EAJF3B,MAEAE,GAEEyB,EAHFN,SAGEM,EAFFzB,WACAD,EACE0B,EADF1B,OAEF,OACE,kBAAC,EAAD,CACEyB,IAAKE,EACL/B,EAAGA,EACHC,EAAGA,EACHC,QAASA,EACTC,MAAOA,EACPC,OAAQA,EACRC,UAAWA,eChDhB2B,MARf,WACE,OACE,yBAAKvB,UAAU,OACb,kBAAC,EAAD,QCKcwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0f30d583.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./node.scss\";\n\nconst Node = props => {\n  const { x, y, isStart, isEnd, weight, isVisited } = props;\n\n  const whatClass = isStart\n    ? \"node-start\"\n    : isEnd\n    ? \"node-end\"\n    : isVisited\n    ? \"node-visited\"\n    : weight === Infinity\n    ? \"wall\"\n    : \"\";\n\n  return <div id={`node-${x}-${y}`} className={`node ${whatClass}`}></div>;\n};\n\nexport default Node;\n","import React, { useState, useEffect } from \"react\";\nimport Node from \"./node/node\";\nimport \"./pathfinding.scss\";\n\nconst PathfindingVisualizer = props => {\n  const [grid, setGrid] = useState([]);\n  const [startY, setStartY] = useState(10);\n  const [startX, setStartX] = useState(10);\n  const [endY, setEndY] = useState(10);\n  const [endX, setEndX] = useState(40);\n\n  const createNode = (x, y) => {\n    return {\n      x,\n      y,\n      isStart: x === startX && y === startY,\n      isEnd: x === endX && y === endY,\n      distance: Infinity,\n      isVisited: false,\n      weight: 1\n    };\n  };\n\n  useEffect(() => {\n    let res = [];\n    for (let i = 0; i < 20; i++) {\n      let temp = [];\n      for (let j = 0; j < 50; j++) {\n        temp.push(createNode(i, j));\n      }\n      res.push(temp);\n    }\n    setGrid(res);\n  }, []);\n\n  return (\n    <React.Fragment>\n      <button>Visualize Djikstra's</button>\n      <div className=\"grid\">\n        {grid.map((row, rowId) => {\n          return (\n            <div key={rowId}>\n              {row.map((node, nodeId) => {\n                const {\n                  x,\n                  y,\n                  isStart,\n                  isEnd,\n                  distance,\n                  isVisited,\n                  weight\n                } = node;\n                return (\n                  <Node\n                    key={nodeId}\n                    x={x}\n                    y={y}\n                    isStart={isStart}\n                    isEnd={isEnd}\n                    weight={weight}\n                    isVisited={isVisited}\n                  ></Node>\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default PathfindingVisualizer;\n","import React from \"react\";\nimport \"./App.scss\";\nimport PathfindingVisualizer from './components/pathfinding-visualizer/pathfinding'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}